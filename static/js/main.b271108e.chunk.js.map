{"version":3,"sources":["components/ToDoItem.jsx","components/InputArea.jsx","components/App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","useState","isDone","setIsDone","className","onClick","prevValue","style","textDecoration","text","onChecked","id","InputArea","inputText","setInputText","type","value","onKeyPress","event","key","onAdd","onChange","newValue","target","App","items","setItems","deleteItem","prevItems","filter","item","index","map","todoItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOA+BeA,MA5Bf,SAAkBC,GAAQ,IAAD,EACKC,oBAAS,GADd,mBAChBC,EADgB,KACRC,EADQ,KAOvB,OACE,yBAAKC,UAAY,WAIfC,QAVJ,WACEF,GAAU,SAAAG,GACR,OAAQA,OAUR,wBACAC,MAAO,CAACC,eAAgBN,EAAS,eAAiB,SACjD,8BAAOF,EAAMS,OACd,yBAAKL,UAAU,SACXC,QAAS,WACTL,EAAMU,UAAUV,EAAMW,MAG1B,2BAAG,kBAAC,IAAD,UCQMC,MA/Bf,SAAmBZ,GAAQ,IAAD,EACUC,mBAAS,IADnB,mBACjBY,EADiB,KACNC,EADM,KAQxB,OACE,yBACAC,KAAK,OAAOC,MAAOH,EACjBI,WAAa,SAAAC,GACO,UAAZA,EAAMC,MACRnB,EAAMoB,MAAMP,GACZC,EAAa,MAGrBV,UAAU,QACR,2BAAOiB,SAfX,SAAsBH,GACpB,IAAMI,EAAWJ,EAAMK,OAAOP,MAC9BF,EAAaQ,IAaoBP,KAAK,OAAOC,MAAOH,IAClD,4BACER,QAAS,WACPL,EAAMoB,MAAMP,GACZC,EAAa,MAGf,wCCgBOU,MAvCf,WAAgB,IAAD,EACavB,mBAAS,IADtB,mBACNwB,EADM,KACCC,EADD,KASb,SAASC,EAAWhB,GAClBe,GAAS,SAAAE,GACP,OAAOA,EAAUC,QAAO,SAACC,EAAMC,GAC7B,OAAOA,IAAUpB,QAKvB,OACE,yBAAKP,UAAU,aACb,yBAAKA,UAAU,WACb,2CAEF,kBAAC,EAAD,CAAWgB,MAnBf,SAAiBP,GACfa,GAAS,SAAAE,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBf,UAkBtB,6BACE,4BACGY,EAAMO,KAAI,SAACC,EAAUF,GAAX,OACT,kBAAC,EAAD,CACEZ,IAAKY,EACLpB,GAAIoB,EACJtB,KAAMwB,EACNvB,UAAWiB,WCtBLO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b271108e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nfunction ToDoItem(props) {\r\n  const [isDone, setIsDone] = useState(false);\r\n  function handleClick() {\r\n    setIsDone(prevValue=>{\r\n      return !prevValue;\r\n    });\r\n  }\r\n  return (\r\n    <div className = \"toDoItem\"\r\n      // onClick={() => {\r\n      //   props.onChecked(props.id);\r\n      // }}\r\n      onClick={handleClick}\r\n    >\r\n      <li\r\n      style={{textDecoration: isDone ? \"line-through\" : \"none\"}}\r\n      ><span>{props.text}</span></li>\r\n      <div className=\"cancel\" \r\n          onClick={() => {\r\n          props.onChecked(props.id);\r\n        }}\r\n      >\r\n      <a><DeleteIcon /></a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction InputArea(props) {\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    const newValue = event.target.value;\r\n    setInputText(newValue);\r\n  }\r\n\r\n  return (\r\n    <div \r\n    type=\"text\" value={inputText}\r\n      onKeyPress={ event => {\r\n          if (event.key==='Enter'){\r\n            props.onAdd(inputText)\r\n            setInputText(\"\");\r\n          } \r\n          }}\r\n    className=\"form\">\r\n      <input onChange={handleChange} type=\"text\" value={inputText}/>\r\n      <button\r\n        onClick={() => {\r\n          props.onAdd(inputText)\r\n          setInputText(\"\");\r\n        }}\r\n      >\r\n        <span>Add</span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputArea;\r\n","import React, { useState } from \"react\";\nimport ToDoItem from \"./ToDoItem\";\nimport InputArea from \"./InputArea\";\n\nfunction App() {\n  const [items, setItems] = useState([]);\n\n  function addItem(inputText) {\n    setItems(prevItems => {\n      return [...prevItems, inputText];\n    });\n  }\n\n  function deleteItem(id) {\n    setItems(prevItems => {\n      return prevItems.filter((item, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <InputArea onAdd={addItem} />\n      <div>\n        <ul>\n          {items.map((todoItem, index) => (\n            <ToDoItem\n              key={index}\n              id={index}\n              text={todoItem}\n              onChecked={deleteItem}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from \"./components/App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}